{
    "type": "Module",
    "label": "node",
    "text": "import json\nimport logging\nimport tempfile\nfrom pathlib import Path\n\nimport pytest\n\nfrom parsnips.extractor import ParsnipsExtractor\n\n\n@pytest.fixture\ndef simple_python_code():\n    return '''class MyClass:\n    def foo(self, x, y=(1, 2)):\n        return x * y[0]\n\nresult = MyClass().foo(10)\n'''\n\n@pytest.fixture\ndef extractor():\n    logger = logging.getLogger(\"parsnips-test\")\n    logger.setLevel(logging.CRITICAL)\n    return ParsnipsExtractor(logger=logger, strict=True)\n\ndef test_extraction_creates_expected_output(extractor, simple_python_code):\n    with tempfile.TemporaryDirectory() as tmpdir:\n        file_path = Path(tmpdir) / \"example.py\"\n        file_path.write_text(simple_python_code, encoding=\"utf-8\")\n\n        extractor.process(file_path)\n\n        output_dir = Path(tmpdir) / \".parsnips\" / \"parsnips__example__py\"\n        assert output_dir.exists()\n\n        # Check that at least some node folders exist (recursively)\n        node_folders = list(output_dir.rglob(\"*\"))\n        node_dirs = [f for f in node_folders if f.is_dir()]\n        assert len(node_dirs) > 0\n\n        # Look for FunctionDef in any subdirectory\n        found = any(\"FunctionDef\" in folder.name for folder in node_dirs)\n        assert found\n\n        # Verify node_metadata.json exists and has correct structure\n        for folder in node_dirs:\n            node_meta = folder / \"node_metadata.json\"\n            assert node_meta.exists()\n            with node_meta.open(encoding=\"utf-8\") as f:\n                metadata = json.load(f)\n            assert \"type\" in metadata\n            assert \"label\" in metadata\n            assert \"text\" in metadata\n            assert \"lineno\" in metadata\n            assert \"effective_lineno\" in metadata\n            assert \"col_offset\" in metadata\n            assert \"file_swhid\" in metadata",
    "lineno": null,
    "effective_lineno": 0,
    "col_offset": 0,
    "file_swhid": "swh:1:cnt:3717580893d369161518e636ba6bda46b3f3b4807efc67003b0b416f48384be9",
    "source_path": "tests/test_extractor.py",
    "source_filename": "test_extractor.py"
}
{
    "type": "FunctionDef",
    "label": "main",
    "text": "def main():\n    parser = argparse.ArgumentParser(description='Parsnips AST extractor and search tool.')\n    parser.add_argument('path', nargs='?', default='.', help='Path to file or directory (default: current directory)')\n    parser.add_argument('-c', '--clean', action='store_true', help='Recursively delete all .parsnips folders')\n    parser.add_argument('-s', '--search', type=str, help='Regular expression to search within node texts')\n    parser.add_argument('-u', '--unicode', action='store_true', help='Normalize search pattern and source code (Unicode NFC)')\n    parser.add_argument('-r', '--regex', action='store_true', help='Interpret the search string as a regular expression')\n    parser.add_argument('-q', '--quiet', action='store_true', help='Suppress logs to stdout')\n    parser.add_argument('-l', '--logfile', type=str, help='Write logs to specified JSON file')\n    parser.add_argument('--strict', action='store_true', help='Abort on first error or missing .parsnips folder')\n    parser.add_argument('--repo-url', type=str, help='Repository origin URL (required for context SWHID generation)')\n    parser.add_argument('--commit', type=str, help='Commit SHA (if known)')\n    parser.add_argument('--release-name', type=str, help='Release name (annotated tag)')\n    parser.add_argument('--ref-name', type=str, help='Reference name (branch name or lightweight tag)')\n    parser.add_argument('--repo-root', type=str, help='Path to the root of the local repo for relative path resolution. Defaults to current working directory.')\n\n    \n    args = parser.parse_args()\n    \n    # setup logger\n    logger = logging.getLogger(\"parsnips\")\n    logger.setLevel(logging.INFO)\n\n    stream_handler = logging.StreamHandler(sys.stdout)\n    stream_handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))\n    if not args.quiet:\n        logger.addHandler(stream_handler)\n\n    if args.logfile:\n        file_handler = logging.FileHandler(args.logfile, mode='w', encoding='utf-8')\n        file_handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s: %(message)s'))\n        logger.addHandler(file_handler)\n\n    \n    input_path = Path(args.path)\n    if not input_path.exists():\n        logger.error(f\"Invalid path: {input_path}\")\n        sys.exit(1)\n\n    if args.clean:\n        root_path = input_path if input_path.is_dir() else input_path.parent\n        parsnips_dir = root_path / '.parsnips'\n        if parsnips_dir.exists():\n            try:\n                shutil.rmtree(parsnips_dir)\n                logger.info(f\"Deleted: {parsnips_dir}\")\n            except Exception as e:\n                logger.warning(f\"Failed to delete {parsnips_dir}: {e}\")\n        else:\n            logger.info(f\"No .parsnips directory found at: {parsnips_dir}\")\n        sys.exit(0)\n\n\n    if args.search:\n        context_qualifiers: dict | None = None\n\n        if args.repo_url:\n            swh_ctx = SWHContext(\n                repo_url=args.repo_url,\n                commit=args.commit,\n                release_name=args.release_name,\n                ref_name=args.ref_name\n            )\n            try:\n                context_qualifiers = swh_ctx.get_context_qualifiers()\n            except Exception as e:\n                logger.error(f\"Failed to resolve anchor: {e}\")\n                sys.exit(1)\n\n        repo_root = args.repo_root or os.getcwd()\n\n        searcher = ParsnipsSearcher(logger=logger, strict=args.strict, use_unicode=args.unicode, use_regex=args.regex, context_qualifiers=context_qualifiers, repo_root=repo_root)\n        results = searcher.search(path=input_path, search_text=args.search)\n        print(json.dumps(results, indent=2, sort_keys=True, ensure_ascii=False))\n        sys.exit(0)\n\n    \n\n    extractor = ParsnipsExtractor(logger=logger, strict=args.strict)\n    extractor.process(input_path)\n    logger.info(\"Parsnips extraction complete.\")",
    "lineno": 14,
    "effective_lineno": 14,
    "col_offset": 0,
    "file_swhid": "swh:1:cnt:63586c3cb1a84cd4d5248521454387723066e050089f3871653bac2addff3334",
    "source_path": "src/parsnips/main.py",
    "source_filename": "main.py"
}
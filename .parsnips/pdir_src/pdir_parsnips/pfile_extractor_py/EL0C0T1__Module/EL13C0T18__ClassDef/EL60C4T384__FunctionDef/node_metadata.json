{
    "type": "FunctionDef",
    "label": "_process_file",
    "text": "    def _process_file(self, file_path: Path, output_dir=None, force_parsnips_dir=False):\n        self.current_file = file_path\n        self.logger.info(f\"Parsnips extracting: `{file_path}`\")\n        parent_dir = file_path.parent\n\n        if force_parsnips_dir:\n            output_dir = parent_dir / '.parsnips'\n            if not output_dir.exists():\n                output_dir.mkdir(exist_ok=True)\n        else:\n            output_dir = output_dir or parent_dir\n\n        try:\n            code = file_path.read_text(encoding='utf-8')\n        except Exception as e:\n            self.logger.error(f\"Failed to read {file_path}: {e}\")\n            self._abort()\n\n        try:\n            atok = asttokens.ASTTokens(code, parse=True)\n        except SyntaxError as e:\n            self.logger.error(f\"Syntax error in {file_path}: {e}\")\n            self._abort()\n        except Exception as e:\n            self.logger.error(f\"AST parsing failed for {file_path}: {e}\")\n            self._abort()\n\n        file_swhid = Swhid.compute_content_swhid(code)\n        assert self.repo_root is not None\n        out_path = self.get_output_dir_for_file(self.repo_root, file_path)\n        out_path.mkdir(parents=True, exist_ok=True)\n\n        self.traversal_counter = 0\n        self._extract_node(atok, atok.tree, out_path, file_swhid, parent_lineno=0)",
    "lineno": 60,
    "effective_lineno": 60,
    "col_offset": 4,
    "file_swhid": "swh:1:cnt:7d7f9763c68ed4e87e39a43c55e678cc521403782263666b937bb7581e2b1a37",
    "source_path": "src/parsnips/extractor.py",
    "source_filename": "extractor.py"
}
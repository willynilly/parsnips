{
    "type": "For",
    "label": "node",
    "text": "                    for p_root, _, p_files in os.walk(parsnips_dir, topdown=True):\n                        for file in p_files:\n                            if file == \"node_metadata.json\":\n                                full_path = Path(p_root) / file\n                                try:\n                                    with open(full_path, encoding='utf-8') as f:\n                                        metadata = json.load(f)\n\n                                    text = metadata.get(\"text\", \"\")\n                                    text_to_search = self.normalize_unicode(text) if self.use_unicode else text\n\n                                    match = regex_compiled.search(text_to_search)\n                                    if match:\n                                        rel_path = os.path.relpath(full_path, start=Path.cwd())\n                                        metadata_str = json.dumps(metadata, sort_keys=True, ensure_ascii=False)\n                                        node_swhid_without_qualifiers = Swhid.compute_content_swhid(metadata_str)\n\n                                        # Compute fully qualified SWHID if context is available\n                                        if self.context_qualifiers and self.repo_root:\n                                            path_qual = os.path.relpath(full_path, start=self.repo_root)\n                                            node_swhid_with_qualifiers = (\n                                                f\"{node_swhid_without_qualifiers}\"\n                                                f\";anchor={self.context_qualifiers['anchor']}\"\n                                                f\";path=/{path_qual}\"\n                                            )\n                                        else:\n                                            node_swhid_with_qualifiers = None\n\n                                        # Extract named capture groups (or None)\n                                        regex_match_groups = match.groupdict() or None\n\n                                        results[rel_path] = {\n                                            \"search_text\": search_text, # either a literal or a regex pattern\n                                            \"search_used_regex\": self.use_regex,\n                                            \"search_used_unicode\": self.use_unicode,\n                                            \"search_regex_match_groups\": regex_match_groups,\n                                            \"node_swhid_without_qualifiers\": node_swhid_without_qualifiers,\n                                            \"node_swhid_with_qualifiers\": node_swhid_with_qualifiers,\n                                            \"node_metadata\": metadata\n                                        }\n\n\n                                except Exception as e:\n                                    msg = f\"Error reading {full_path}: {e}\"\n                                    if self.strict:\n                                        self.logger.error(msg)\n                                        sys.exit(1)\n                                    else:\n                                        self.logger.warning(msg)",
    "lineno": 66,
    "effective_lineno": 66,
    "col_offset": 20,
    "file_swhid": "swh:1:cnt:2859b4782591ebc405d65df5998d21b4995fa95cc69bd30bb58dc542e1acc607",
    "source_path": "src/parsnips/searcher.py",
    "source_filename": "searcher.py"
}
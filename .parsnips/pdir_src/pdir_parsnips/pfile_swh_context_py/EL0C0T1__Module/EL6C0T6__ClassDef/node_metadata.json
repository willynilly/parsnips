{
    "type": "ClassDef",
    "label": "SWHContext",
    "text": "class SWHContext:\n    BASE_URL = \"https://archive.softwareheritage.org/api/1\"\n\n    def __init__(self, repo_url=None, commit=None, release_name=None, ref_name=None, visit=None):\n        self.repo_url = repo_url\n        self.commit = commit\n        self.release_name = release_name\n        self.ref_name = ref_name\n        self.visit = visit  # optional snapshot ID\n        self.snapshot_id = None\n        self.anchor_swhid = None\n\n    def lookup_snapshot(self) -> str | None:\n        if self.repo_url is None:\n            return None\n        origin_encoded = urllib.parse.quote(self.repo_url, safe='')\n        url = f\"{self.BASE_URL}/origin/{origin_encoded}/visits/\"\n        response = requests.get(url)\n        response.raise_for_status()\n        visits = response.json()['origin_visits']\n        if not visits:\n            raise ValueError(\"No visits found for origin in SWH.\")\n        latest_visit = visits[-1] if not self.visit else next(\n            v for v in visits if v['visit'] == int(self.visit))\n        self.snapshot_id = latest_visit['snapshot']\n        return self.snapshot_id\n\n    def lookup_anchor(self) -> str | None:\n        \"\"\"\n        Resolve the appropriate SWH anchor based on user-provided inputs.\n\n        Priority order:\n        1. --commit        → revision SWHID\n        2. --release-name  → release SWHID\n        3. --ref-name      → branch or lightweight tag → revision SWHID\n\n        Returns:\n            str: anchor SWHID (swh:1:rev:... or swh:1:rel:...)\n\n        Raises:\n            ValueError if none of the inputs are sufficient to resolve an anchor.\n        \"\"\"\n        if self.repo_url is None:\n            raise ValueError(\"Repository URL is required to resolve an anchor.\")\n\n        # Always ensure snapshot context is loaded before anchor resolution\n        if not self.snapshot_id:\n            self.lookup_snapshot()\n\n        # 1. Priority: resolve revision via commit\n        if self.commit:\n            return self.lookup_revision_from_commit()\n\n        # 2. Next: resolve release via release name (annotated tag)\n        if self.release_name:\n            return self.lookup_release()\n\n        # 3. Last: resolve revision via ref (branch name or lightweight tag)\n        if self.ref_name:\n            return self.lookup_ref()\n\n        # 4. Fail if no qualifying context is provided\n        raise ValueError(\n            \"Unable to resolve anchor: provide at least one of --commit, --release-name, or --ref-name.\"\n        )\n\n    \n    def lookup_revision_from_commit(self) -> str | None:\n        if self.repo_url is None:\n            return None\n        \n        origin_encoded = urllib.parse.quote(self.repo_url, safe='')\n        url = f\"{self.BASE_URL}/origin/{origin_encoded}/lookup/commit/{self.commit}/\"\n        response = requests.get(url)\n        response.raise_for_status()\n        revision_id = response.json()['id']\n        self.anchor_swhid = revision_id\n        return revision_id\n\n    def lookup_release(self) -> str | None:\n        if self.repo_url is None:\n            return None\n        \n        snapshot: dict | None = self.get_snapshot_object()\n        if snapshot is None:\n            return None\n        \n        releases = snapshot.get('releases', {})\n        if self.release_name not in releases:\n            raise ValueError(f\"Release {self.release_name} not found in snapshot.\")\n        rel_id = releases[self.release_name]['target']['id']\n        self.anchor_swhid = rel_id\n        return rel_id\n\n    def lookup_ref(self) -> str | None:\n        if self.repo_url is None:\n            return None\n        \n        snapshot: dict | None = self.get_snapshot_object()\n        if snapshot is None:\n            return None\n        \n        branches = snapshot.get('branches', {})\n        if self.ref_name not in branches:\n            raise ValueError(f\"Ref {self.ref_name} not found in snapshot.\")\n        rev_id = branches[self.ref_name]['target']['id']\n        self.anchor_swhid = rev_id\n        return rev_id\n\n    def get_snapshot_object(self) -> dict | None:\n        if self.repo_url is None:\n            return None\n        \n        if not self.snapshot_id:\n            self.lookup_snapshot()\n        url = f\"{self.BASE_URL}/snapshot/{self.snapshot_id}/\"\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.json()\n\n    def get_context_qualifiers(self) -> dict | None:\n        \"\"\"Returns the context qualifiers as dict\"\"\"\n\n        if self.repo_url is None:\n            return None\n        \n        if not self.anchor_swhid:\n            self.lookup_anchor()\n\n        qualifiers = {\n            \"origin\": self.repo_url,\n            \"visit\": f\"swh:1:snp:{self.snapshot_id}\",\n            \"anchor\": self.anchor_swhid\n        }\n        return qualifiers",
    "lineno": 6,
    "effective_lineno": 6,
    "col_offset": 0,
    "file_swhid": "swh:1:cnt:5b1c9b354784f96cfb13d405f9aed721ce05b84f8f44451d75324fdef86fdba3",
    "source_path": "src/parsnips/swh_context.py",
    "source_filename": "swh_context.py"
}